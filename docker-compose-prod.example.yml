##################################################
##### PRODUCTION ENVIRONMENT           ##########
##################################################

services:
  traefik:
    image: traefik:v2.11
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/deployment/data/traefik:/data
    command:
      # discover docker labels automatically
      - --providers.docker=true

      # enable both HTTP and HTTPS entrypoints
      - --entryPoints.web.address=:80
      - --entryPoints.websecure.address=:443

      # redirect all HTTP traffic to HTTPS
      - --entryPoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https

      # configure Let's Encrypt resolver named "letsencrypt"
      # TODO: email as env var
      - --certificatesResolvers.letsencrypt.acme.email=technik@sandstorm-media.de
      - --certificatesResolvers.letsencrypt.acme.storage=/data/acme.json
      - --certificatesResolvers.letsencrypt.acme.httpChallenge.entryPoint=web
      # comment-in the next line for using a staging let's encrypt endpoint for testing
      #- --certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
    container_name: traefik

  degree:
    image: docker-hub.sandstorm.de/degree-4.0/code:main
    restart: always
    labels:
      # set the host to degree40.tu-dortmund.de
      # TODO: host as env var
      - "traefik.http.routers.degree.rule=Host(`degree40.tu-dortmund.de`)"
      # enable let's encrypt
      - "traefik.http.routers.degree.tls=true"
      - "traefik.http.routers.degree.tls.certresolver=letsencrypt"
      - "traefik.http.services.degree.loadbalancer.server.port=8080"
    environment:
      # TODO: TRUSTED_HOSTS as env var
      TRUSTED_HOSTS: degree40.tu-dortmund.de
      # TODO: change db url and use env var
      DATABASE_URL: "mysql://degree:${MYSQL_PASSWORD}@db/degree"
      APP_SECRET: "${APP_SECRET}"
      APP_ENV: "prod"
      LIVE_SYNC_JWT_PRIVATE_SIGNING_KEY: "${LIVE_SYNC_JWT_PRIVATE_SIGNING_KEY}"
      JWT_KEY: "${LIVE_SYNC_JWT_PRIVATE_SIGNING_KEY}"
      MAILER_DSN: "${MAILER_DSN}"
      MAILER_SENDER_ADDRESS: "${MAILER_SENDER_ADDRESS}"
      MAILER_SENDER_NAME: "${MAILER_SENDER_NAME}"
      SHELL_ENV_DISPLAY: "production"
    ports:
      - 8080
    depends_on:
      - db
    volumes:
      - /home/deployment/data/app/var/log:/app/var/log
      - /home/deployment/data/app/var/data:/app/var/data
      - /home/deployment/data/app/public/data:/app/public/data
      - /home/deployment/data/app/config/secrets:/app/config/secrets

  redis:
    image: redis:7.2-alpine3.19
    restart: always
    ports:
      # Redis will only be exposed to LOCALHOST, so it can be accessed via SSH tunnel
      - 127.0.0.1:6379:6379

  redis-ui:
    image: rediscommander/redis-commander
    restart: always
    environment:
      REDIS_HOSTS: "redis:redis:6379:0"
      PORT: 8900
    ports:
      - 8900

  #####
  # DB
  db:
    image: mariadb:10.11.7
    restart: always
    ports:
      # MySQL will only be exposed to LOCALHOST, so it can be accessed via SSH tunnel
      - 127.0.0.1:3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_DATABASE: degree
      MYSQL_USER: degree
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
    volumes:
      - /home/deployment/data/mysql:/var/lib/mysql:rw

networks:
  default:
    ipam:
      config:
        # must match TRUSTED_PROXIES .env
        - subnet: 172.16.0.0/16
