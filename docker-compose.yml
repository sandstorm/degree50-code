version: '3.4'

services:
  api:
    build:
      context: ./
      dockerfile: deployment/docker/Dockerfile
#    healthcheck:
#      interval: 10s
#      timeout: 3s
#      retries: 3
#      start_period: 30s
    ports:
      - 8080:8080
    depends_on:
      - db
    volumes:
      - ./api:/app:rw,cached
      - app-var:/app/var

  redis:
    image: redis:6.0.1-alpine3.11
    ports:
      - 16379:6379

  redis-ui:
    image: rediscommander/redis-commander
    environment:
      REDIS_HOSTS: 'redis:redis:6379:0'
      PORT: 8900
    ports:
      - 8002:8900

  #####
  # assets build (watcher)
  assets:
    build:
      context: .
      dockerfile: ./deployment/assets-build/Dockerfile
    volumes:
      - ./api/webpack.config.js:/app/webpack.config.js:ro
      - ./api/tsconfig.json:/app/tsconfig.json:ro
      - ./api/yarn.lock:/app/yarn.lock:rw
      - ./api/package.json:/app/package.json:rw
      - ./api/postcss.config.js:/app/postcss.config.js:rw
      - ./api/assets:/app/assets:ro
      - ./api/public/build:/app/public/build:rw
      # The node modules folder is an extra (writable) volume to not be part of the outer volume.
      # This is an optimization to NOT include the huge node_modules in the synchronization between host and guest
      # NOTE: for this to work, the node_modules folder as mount target must EXIST when being mounted; so it is checked into git (with an empty placeholder file)
      - assets-node-modules:/app/node_modules
      # Explicitly set up Yarn cache for faster fetching of packages
      - yarn-cache:/app/.yarn-cache/:cached


  #####
  # DB
  db:
    image: mariadb:10.2.25
    ports:
      - 13306:3306
    environment:
      MYSQL_ROOT_PASSWORD: '!ChangeMe!'
      MYSQL_DATABASE: api
      MYSQL_USER: api-platform
      MYSQL_PASSWORD: '!ChangeMe!'
    volumes:
      - db-data:/var/lib/mysql:rw

volumes:
  app-var: {}
  db-data: {}
  assets-node-modules: {}
  yarn-cache: {}
