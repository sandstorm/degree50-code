##################################################
##### PRODUCTION ENVIRONMENT           ##########
##################################################

services:
    degree:
        image: docker-hub.sandstorm.de/degree-4.0/code/app:${IMAGE_TAG}
        restart: unless-stopped
        env_file:
            # .env gets used by docker compose itself to parse this yaml file
            # general env contains db connection, JWT, APP_SECRET and mailer configuration
            - .general.env
            # env for original degree for tu-dortmund SSO
            - .saml.env
            # this file is put on the server manually and holds global secrets like mail server config
            - .secrets.env
        environment:
            APP_ENV: "prod"
            SHELL_ENV_DISPLAY: "production"
        expose:
            - "8080"
        volumes:
            - ./data/app/var/log:/app/var/log
            - ./data/app/var/data:/app/var/data
            - ./data/app/public/data:/app/public/data
            - ./data/app/config/secrets:/app/config/secrets
        networks:
            default: {}
            sharedIngressNetwork:
                # alias used by caddy to identify the degree service instance
                # WHY:
                ## Short explanation: Avoid docker internal dns name collision with other running instances.
                ## Long explanation:
                ## The "-instance" suffix is important, because the container automatically(!) gets other aliases
                ## (internally created based on service name) by docker compose.
                ## So the degree service automatically gets the alias "degree" in the sharedIngressNetwork which
                ## leads to multiple services having the same alias in the same network wich in turn leads to
                ## problems when docker is resolving the alias to a single container.
                ## See https://docs.docker.com/reference/compose-file/services/#aliases
                ## To check configured aliases run: docker inspect <container_name> and look at the aliases configured
                ## for the sharedIngressNetwork network.
                aliases:
                  - ${INSTANCE_NAME}-instance

    redis:
        image: redis:7
        restart: unless-stopped
        networks:
            default: {}

networks:
    default:
        name: ${INSTANCE_NAME}-network
    sharedIngressNetwork:
        external: true
