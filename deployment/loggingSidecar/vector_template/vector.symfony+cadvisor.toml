data_dir = "./tmp"

[api]
enabled = false

# Symfony Logs Pipeline
[sources.symfony_logs]
type         = "file"
include      = ["/app/var/log/*.log"]

# we do not care about totally old exceptions
#ignore_older = 86400                         # 1 day

[transforms.remove_email_address]
inputs = [ "symfony_logs" ]
type = "remap"
source = '''
    replaced, err = replace(.message, pattern: r'([a-z0-9_+]([a-z0-9_+.]*[a-z0-9_+])?)@([a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,6})', with: "EMAIL@REPLACED", count: -1)
    if err == null {
        .message = replaced
    }
  '''

[transforms.add_sandstorm_metadata]
inputs = [ "remove_email_address" ]
type = "remap"
source = '''
    .customer.tenant = "{{.Env.LOGGING_CUSTOMER_TENANT}}"
    .customer.project = "{{.Env.LOGGING_CUSTOMER_PROJECT}}"
    .host.name = "{{.Env.LOGGING_HOST_NAME}}"
    .host.group = "{{.Env.LOGGING_HOST_GROUP}}"
    .event.module = "symfony"
    .event.dataset = "symfony.logs"
  '''


# Prometheus
[sources.cadvisor]
type = "prometheus_scrape"
endpoints = ["http://cadvisor:8080/metrics"]
scrape_interval_secs = 300 # every 5 mins

[transforms.cadvisor_add_sandstorm_metadata]
inputs = [ "cadvisor" ]
type = "remap"
source = '''
    .tags.heritage = "vector"
    .tags.customer_tenant = "{{.Env.LOGGING_CUSTOMER_TENANT}}"
    .tags.customer_project = "{{.Env.LOGGING_CUSTOMER_PROJECT}}"
    .tags.host_name = "{{.Env.LOGGING_HOST_NAME}}"
    .tags.host_group = "{{.Env.LOGGING_HOST_GROUP}}"
    .tags.event_module = "cAdvisor"
    .tags.event_dataset = "cAdvisor.metrics"
  '''


# Sinks
[sinks.sandstorm_central_vector]
inputs       = ["add_sandstorm_metadata", "cadvisor_add_sandstorm_metadata"]
type         = "vector"
address = "vector.cloud.sandstorm.de:31100"

tls.ca_file = "/certificates/ca.pem"
tls.crt_file = "/certificates/vector-client.pem"
tls.enabled = true
tls.key_file = "/certificates/vector-client-key.pem"
tls.verify_certificate = true
tls.verify_hostname = true





#[sinks.console_debug]
#inputs       = ["cadvisor_add_sandstorm_metadata"]
#type         = "console"
#encoding     = "json"




















[[tests]]
name = "Replace Emails"

[[tests.inputs]]
insert_at = "remove_email_address"
type = "raw"
value = '''[2021-06-22T17:05:34.605340+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"sebastian.kurfuerst@sand-storm.de"} []'''

[[tests.outputs]]
extract_from = "remove_email_address"
[[tests.outputs.conditions]]
type = "check_fields"
"message.equals" = '''[2021-06-22T17:05:34.605340+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"EMAIL@REPLACED"} []'''


