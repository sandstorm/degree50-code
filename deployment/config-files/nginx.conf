worker_processes  auto;
error_log stderr warn;
daemon off;

error_log  /var/log/nginx/error.log warn;
pid        /tmp/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    access_log    /dev/stdout;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';


    sendfile        on;
    #tcp_nopush     on;

    # We don't want to expose these information to the outer world.
    fastcgi_hide_header  X-Powered-By;

    keepalive_timeout  65;

    # gzip on; – enables gzip compression
    gzip on;
    # gzip_vary on: – tells proxies to cache both gzipped and regular versions of a resource
    gzip_vary on;
    # gzip_min_length 1024; – informs NGINX to not compress anything smaller than the defined size
    gzip_min_length 1024;
    # gzip_proxied – compress data even for clients that are connecting via proxies (here we’re enabling compression if: a response header includes the “expired”, “no-cache”, “no-store”, “private”, and “Authorization” parameters)
    gzip_proxied any;
    # gzip_comp_level 6; - Sets a gzip compression level of a response. Acceptable values are in the range from 1 to 9.
    gzip_comp_level 6;
    # gzip_http_version 1.0 –  Sets the minimum HTTP version of a request required to compress a response.
    gzip_http_version 1.0;
    # gzip_types – Enables gzipping of responses for the specified MIME types in addition to “text/html”. The special value “*” matches any MIME type (0.8.29). Responses with the “text/html” type are always compressed.
    gzip_types *;
    # more gzip info https://markontech.com/hosting/enable-gzip-compression-on-nginx/
    # more gzip info https://nginx.org/en/docs/http/ngx_http_gzip_module.html

    client_max_body_size 256m;

    server {
        listen       8080;
        server_name  0.0.0.0;
        root   /app/public;
        index index.html index.htm index.php;

        location / {
            try_files $uri /index.php$is_args$args;
        }
        location ~ ^/index\.php(/|$) {
            fastcgi_pass   unix:/tmp/php8-fpm.sock;

            # Increase the buffer size to handle large cache invalidation headers
            fastcgi_buffer_size 32k;
            fastcgi_buffers 32 4k;

            fastcgi_split_path_info ^(.+\.php)(/.*)$;
            include fastcgi_params;

            # When you are using symlinks to link the document root to the
            # current version of your application, you should pass the real
            # application path instead of the path to the symlink to PHP
            # FPM.
            # Otherwise, PHP's OPcache may not properly detect changes to
            # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
            # for more information).
            fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
            fastcgi_param DOCUMENT_ROOT $realpath_root;
            # Prevents URIs that include the front controller. This will 404:
            # http://domain.tld/index.php/some-path
            # Remove the internal directive to allow URIs like this
            internal;
        }

        # return 404 for all other php files not matching the front controller
        # this prevents access to other php files you don't want to be accessible.
        location ~ \.php$ {
            return 404;
        }

        # URL for health checks
        location /nginx-health {
            access_log off;
            default_type text/plain;
            return 200 "healthy\n";
        }

        # mercure hub redirect
        location /.well-known/mercure {
            proxy_pass http://127.0.0.1:3000;
            proxy_read_timeout 24h;
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Enable fast reply in SSE
            proxy_buffering off;

            ## Be sure to set USE_FORWARDED_HEADERS=1 to allow the hub to use those headers ##
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    include conf.d/*.conf;
}
