"""This is a dummy entity. Remove it!"""
type Exercise implements Node {
  id: ID!

  """A nice person"""
  name: String!

  """The entity Id"""
  _id: String!
  phases(
    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
  ): ExercisePhaseConnection
}

"""Connection for Exercise."""
type ExerciseConnection {
  edges: [ExerciseEdge]
  pageInfo: ExercisePageInfo!
  totalCount: Int!
}

"""Edge of Exercise."""
type ExerciseEdge {
  node: Exercise
  cursor: String!
}

"""Information about the current page."""
type ExercisePageInfo {
  endCursor: String
  startCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

"""This is a dummy entity. Remove it!"""
type ExercisePhase implements Node {
  id: ID!

  """A nice person"""
  name: String!

  """Aufgabenstellung"""
  task: String!
  definition: String!
  belongsToExcercise: Exercise
  sorting: String!

  """The entity Id"""
  _id: String!
}

"""Connection for ExercisePhase."""
type ExercisePhaseConnection {
  edges: [ExercisePhaseEdge]
  pageInfo: ExercisePhasePageInfo!
  totalCount: Int!
}

"""Edge of ExercisePhase."""
type ExercisePhaseEdge {
  node: ExercisePhase
  cursor: String!
}

"""Information about the current page."""
type ExercisePhasePageInfo {
  endCursor: String
  startCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type Mutation {
  """Deletes a ExercisePhase."""
  deleteExercisePhase(input: deleteExercisePhaseInput!): deleteExercisePhasePayload

  """Updates a ExercisePhase."""
  updateExercisePhase(input: updateExercisePhaseInput!): updateExercisePhasePayload

  """Creates a ExercisePhase."""
  createExercisePhase(input: createExercisePhaseInput!): createExercisePhasePayload

  """Deletes a Exercise."""
  deleteExercise(input: deleteExerciseInput!): deleteExercisePayload

  """Updates a Exercise."""
  updateExercise(input: updateExerciseInput!): updateExercisePayload

  """Creates a Exercise."""
  createExercise(input: createExerciseInput!): createExercisePayload

  """Deletes a Video."""
  deleteVideo(input: deleteVideoInput!): deleteVideoPayload

  """Updates a Video."""
  updateVideo(input: updateVideoInput!): updateVideoPayload

  """Creates a Video."""
  createVideo(input: createVideoInput!): createVideoPayload
}

"""A node, according to the Relay specification."""
interface Node {
  """The id of this node."""
  id: ID!
}

type Query {
  node(id: ID!): Node
  exercisePhase(id: ID!): ExercisePhase
  exercisePhases(
    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
  ): ExercisePhaseConnection
  exercise(id: ID!): Exercise
  exercises(
    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
  ): ExerciseConnection
  video(id: ID!): Video
  videos(
    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    title: String
  ): VideoConnection
}

type Video implements Node {
  id: ID!
  _id: String!
  title: String!
  description: String!
}

"""Connection for Video."""
type VideoConnection {
  edges: [VideoEdge]
  pageInfo: VideoPageInfo!
  totalCount: Int!
}

"""Edge of Video."""
type VideoEdge {
  node: Video
  cursor: String!
}

"""Information about the current page."""
type VideoPageInfo {
  endCursor: String
  startCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

"""This is a dummy entity. Remove it!"""
input createExerciseInput {
  """A nice person"""
  name: String!
  phases: [String]
  clientMutationId: String
}

"""This is a dummy entity. Remove it!"""
type createExercisePayload {
  exercise: Exercise
  clientMutationId: String
}

"""This is a dummy entity. Remove it!"""
input createExercisePhaseInput {
  """A nice person"""
  name: String!

  """Aufgabenstellung"""
  task: String!
  definition: String!
  belongsToExcercise: String
  sorting: String!
  clientMutationId: String
}

"""This is a dummy entity. Remove it!"""
type createExercisePhasePayload {
  exercisePhase: ExercisePhase
  clientMutationId: String
}

input createVideoInput {
  title: String!
  description: String!
  uploadedVideoFile: String!
  encodedVideoDirectory: String!
  clientMutationId: String
}

type createVideoPayload {
  video: Video
  clientMutationId: String
}

"""This is a dummy entity. Remove it!"""
input deleteExerciseInput {
  id: ID!
  clientMutationId: String
}

"""This is a dummy entity. Remove it!"""
type deleteExercisePayload {
  exercise: Exercise
  clientMutationId: String
}

"""This is a dummy entity. Remove it!"""
input deleteExercisePhaseInput {
  id: ID!
  clientMutationId: String
}

"""This is a dummy entity. Remove it!"""
type deleteExercisePhasePayload {
  exercisePhase: ExercisePhase
  clientMutationId: String
}

input deleteVideoInput {
  id: ID!
  clientMutationId: String
}

type deleteVideoPayload {
  video: Video
  clientMutationId: String
}

"""This is a dummy entity. Remove it!"""
input updateExerciseInput {
  id: ID!

  """A nice person"""
  name: String
  phases: [String]
  clientMutationId: String
}

"""This is a dummy entity. Remove it!"""
type updateExercisePayload {
  exercise: Exercise
  clientMutationId: String
}

"""This is a dummy entity. Remove it!"""
input updateExercisePhaseInput {
  id: ID!

  """A nice person"""
  name: String

  """Aufgabenstellung"""
  task: String
  definition: String
  belongsToExcercise: String
  sorting: String
  clientMutationId: String
}

"""This is a dummy entity. Remove it!"""
type updateExercisePhasePayload {
  exercisePhase: ExercisePhase
  clientMutationId: String
}

input updateVideoInput {
  id: ID!
  title: String
  description: String
  uploadedVideoFile: String
  encodedVideoDirectory: String
  clientMutationId: String
}

type updateVideoPayload {
  video: Video
  clientMutationId: String
}

